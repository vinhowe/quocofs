# encoding: utf-8
from abc import ABC, abstractmethod

import typing
from .hashes import *

# TODO(vinhowe): This should be auto-generated by PyO3 in the future.
# Currently there doesn't seem to be support for stub files with type hints: https://github.com/PyO3/pyo3/issues/510

CHUNK_LENGTH = 4096
MAX_DATA_LENGTH = 4294967296
KEY_LENGTH = 32
MAX_NAME_LENGTH = 512
SALT_LENGTH = 16
HASH_LENGTH = 32
UUID_LENGTH = 16

class Session:
    def __new__(
        cls, path: str, key: bytes, remote: typing.Optional[RemoteAccessorConfig]
    ):
        pass
    def object(self, id: bytes) -> bytes:
        pass
    def create_object(self, data: bytes) -> bytes:
        pass
    def modify_object(self, id: bytes, data: bytes) -> None:
        pass
    def delete_object(self, id: bytes) -> None:
        pass
    def object_id_with_name(self, name: str) -> typing.Optional[bytes]:
        pass
    def set_object_name(self, id: bytes, name: str) -> None:
        pass
    def flush(self) -> None:
        pass
    def object_temp_file(self, id: bytes) -> str:
        pass
    def clear_temp_files(self) -> None:
        pass
    def push_remote(self) -> None:
        pass
    def pull_remote(self) -> None:
        pass
    def __enter__(self):
        pass
    def __exit__(self, exc_type, exc_val, exc_tb):
        pass

# This class doesn't actually exist
class RemoteAccessorConfig(ABC):
    @abstractmethod
    def create(self) -> RemoteAccessorConfig:
        pass

class GoogleStorageAccessorConfig(RemoteAccessorConfig):
    def __new__(cls, bucket: str, config_path: str):
        pass
    def create(self) -> GoogleStorageAccessorConfig:
        pass

class IoError(Exception):
    pass

class EncryptionError(Exception):
    pass

class DecryptionError(Exception):
    pass

class EmptyInput(Exception):
    pass

class KeyGenerationError(Exception):
    pass

class NameTooLong(Exception):
    pass

class InvalidMagicBytes(Exception):
    pass

class EncryptionInputTooLong(Exception):
    pass

class UndeterminedError(Exception):
    pass

class SessionDisposed(Exception):
    pass

class SessionPathLocked(Exception):
    pass

class TempFileDeletesFailed(Exception):
    pass

class TempFileDeleteFailed(Exception):
    pass

class NoRemotes(Exception):
    pass

class GoogleStorageError(Exception):
    pass

def dumps(obj: bytes, key: bytes) -> bytes:
    """Return compressed, encrypted quoco data from ``obj`` as a ``bytes`` object.

    :param obj: Plaintext data
    :param key: Encryption key of length KEY_LENGTH
    :return: Compressed/encrypted data
    """
    pass

def loads(obj: bytes, key: bytes) -> bytes:
    """Return plaintext data from quocoed data ``obj`` as a ``bytes`` object.

    :param obj: Compressed/encrypted data
    :param key: Encryption key of length KEY_LENGTH
    :return: Plaintext data
    """
    pass

def key(password: str, salt: bytes) -> bytes:
    """Generate encryption key from password.

    :param password:
    :param salt: Salt of length SALT_LENGTH
    :return: Generated key
    """
    pass

def sha256(data: bytes) -> bytes:
    """Generate sha256 hash for data.

    :return: SHA-256 hash of ``data``
    """
    pass

__all__ = [
    "CHUNK_LENGTH",
    "MAX_DATA_LENGTH",
    "KEY_LENGTH",
    "MAX_NAME_LENGTH",
    "SALT_LENGTH",
    "HASH_LENGTH",
    "UUID_LENGTH",
    "Session",
    "RemoteAccessorConfig",
    "GoogleStorageAccessorConfig",
    "IoError",
    "EncryptionError",
    "DecryptionError",
    "EmptyInput",
    "KeyGenerationError",
    "NameTooLong",
    "InvalidMagicBytes",
    "EncryptionInputTooLong",
    "UndeterminedError",
    "SessionDisposed",
    "SessionPathLocked",
    "TempFileDeleteFailed",
    "TempFileDeletesFailed",
    "NoRemotes",
    "GoogleStorageError",
    "dumps",
    "loads",
    "key",
    "sha256",
    "hashes",
]

__loader__ = None

__spec__ = None
